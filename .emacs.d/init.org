#+title: Emacs From Scratch
#+author: Soumava Seal
#+description: This is the literate configuaration file for my emacs system.

* Config file Location:

  Emacs normally finds it configuration file in the $HOME directory. You can put all your configuration in the follwing locations.
  1. ~/.emacs
  2. ~/emacs.d/init.el

     
* Basic Configuration:
  
  Here are some configuration for the house-keeping activities.
  
** Basic Sytem Configuaration :

   This is to setup the basic configuaration for the emacs system. Here we setup the user-emacs-directory which is the place where emacs keep all of it's packages.
   
  #+begin_src elisp :tangle init.el

    (setq user-emacs-directory "~/.emacs.d/")							; All the packages are stored here.
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit) 	      	; This kill the prompt on esc key press.
    (set-frame-parameter (selected-frame) 'alpha '(90 . 90))		    ; This is to set the opacity of the frame.
    (setq custom-file (concat user-emacs-directory "custom.el"))		; This is to keep the emacs custom settings file in a seperate file 
    (load custom-file 'noerror)

  #+end_src


** Basic UI Tweaks :

  #+begin_src elisp :tangle init.el

    (setq inhibit-startup-message t)									; This prevents the startup message.

    (scroll-bar-mode -1)        										; Disable visible scrollbar
    (tool-bar-mode -1)          										; Disable the toolbar
    (tooltip-mode -1)           										; Disable tooltips
    (menu-bar-mode -1)        				    						; Disable the menu bar

    (set-fringe-mode 10)         										; Give some breathing room

    (add-hook 'text-mode-hook 'visual-line-mode)						; Soft Word Wrap

    ;; Relative Line Numbers
    (setq column-number-mode t)
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode)

  #+end_src


** Fonts :
   
   This is the font section. Here you can define the fonts for your emacs.

  #+begin_src elisp :tangle init.el

    (set-face-attribute 'default nil :font "Cascadia Mono" :height 110)
    (set-face-attribute 'font-lock-comment-face nil :font "Source Code Pro" :height 120 :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil :font "Cascadia Mono PL" :height 110 :slant 'italic)
    (setq-default line-spacing 0.12)

 #+end_src
  

** Tab-width:

  #+begin_src elisp :tangle init.el 

    (setq-default tab-width 4)
    (setq-default evil-shift-width tab-width)
    (setq-default indent-tabs-mode nil)

  #+end_src


** Remove Backup Directory:
    #+begin_src elisp :tangle init.el 
	
    (setq auto-save-default nil)
    (setq make-backup-files nil)

    #+end_src

  
* Package Management :
  
** Adding melpa:

   Melpa is a package repository for emacs. you can read more about Melpa [[https://melpa.org/][here]].
   
  #+begin_src elisp :tangle init.el

    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless package-archive-contents
        (package-refresh-contents))

  #+end_src

  
** Install use-package:
  
  #+begin_src elisp :tangle init.el
    (unless (package-installed-p 'usepackage)
      (package-install 'use-package))
  #+end_src 

  
** Install Evil and Evil Collection:

  #+begin_src elisp :tangle init.el

    (use-package evil
        :ensure t
        :init
            (setq evil-want-integration t)
            (setq evil-want-keybinding nil)
            (setq evil-split-window-below t)
            (evil-mode))
            (use-package evil-collection
        :after evil
        :ensure t
        :config
            (evil-collection-init))

  #+end_src


** Org-superstar

  This package is used to have the bullet icons for the org document headings.

  #+begin_src elisp :tangle init.el

    (use-package org-superstar
        :ensure t
        :init
            (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
        :config
            (setq org-superstar-leading-bullet ?\s))

  #+end_src


** Doom Theme:

  Doom themes is a collection of various mordern themes.

  #+begin_src elisp :tangle init.el

    (use-package doom-themes
        :ensure t
        :config
            (setq doom-themes-enable-bold t
                  doom-themes-enable-italics t)
            (load-theme 'doom-gruvbox t)
            (doom-themes-visual-bell-config)
            (doom-themes-org-config))

  #+end_src


** Doom-Modeline

  Doom modeline is minimal and mordern modeline for emacs.

  #+begin_src elisp :tangle init.el

 	(use-package doom-modeline
  	  :ensure t
 	  :init (doom-modeline-mode 1))

  #+end_src


** Magit :

  Magit is a git client for emacs.

  #+begin_src elisp :tangle init.el
    (use-package magit
        :ensure t)
  #+end_src

  
** snippets

  We are using the yasnippet package for the snippet extension and the snippets are from doom-snippet repository which is hosted over [[https://github.com/doomemacs/snippets][github]].

  #+begin_src elisp :tangle init.el

    (use-package yasnippet-snippets
        :ensure t)

    (use-package yasnippet
        :ensure t
        :init
            (yas-global-mode t))

#+end_src


** Company Mode:

  Company mode is an auto-completion package for emacs.

  #+begin_src elisp :tangle init.el

    (use-package company
        :ensure t
        :config
            (setq company-idle-delay 0)
            (setq company-minimum-prefix-length 3)
            (global-company-mode t))

  #+end_src




** Which Key :

  Which Key shows the key bindings following your currently entered incomplete command (a prefix) in a popup. There are a lot of configuration options in the which key package you can read them on their [[https://github.com/justbur/emacs-which-key/tree/129f4ebfc74f207ac82978f6d90d8b4bb1a55cf9][github]] page.

  #+begin_src elisp :tangle init.el

    (use-package which-key
        :ensure t
        :init
            (which-key-mode))

  #+end_src


** LSP-mode:
   
  #+begin_src elisp :tangle init.el

    (use-package lsp-mode
        :commands (lsp lsp-deffered)
        :init
            (setq lsp-keymap-prefix "C-c l")
        :hook (
            (python-mode . lsp)
			(c++-mode . lsp)
            (lsp-mode . lsp-enable-which-key-integration))
        :commands lsp)

    (use-package lsp-ui
        :ensure t
        :hook (lsp-mode . lsp-ui-mode)
        :config
            (setq lsp-ui-sideline-enable t)
            (setq lsp-ui-sideline-show-diagnostics t))

    (use-package flycheck
        :ensure t
        :defer t
        :hook (lsp-mode . flycheck-mode))

  #+end_src


** Language Specific Packages:
   
*** Python:

  #+begin_src elisp :tangle init.el

    (use-package python-mode
        :ensure t
        :custom
            (python-shell-interpreter "python"))

  #+end_src


*** Java :

  #+begin_src elisp :tangle init.el

    (use-package lsp-java
        :ensure t
        :hook(
            (java-mode . lsp))
        :init
            (setq lsp-java-java-path "/home/soumava/Development/jdk-18.0.1.1/bin/java")
            (setq lsp-java-server-install-dir "/home/soumava/Development/java_lsp/jdt-language-server-1.10.0-202203040350/"))

  #+end_src


*** Dart and Flutter:

  #+begin_src elisp :tangle init.el 
    (use-package lsp-dart
        :ensure t
        :hook (dart-mode . lsp))
  
  #+end_src

*** Lua Mode:

#+begin_src elisp :tangle init.el

    (use-package lua-mode
        :ensure t
        :config
            (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode)))

#+end_src

  
** Ivy counel swiper

  #+begin_src elisp :tangle init.el

    (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
        :map ivy-minibuffer-map
        ;("TAB" . ivy-alt-done)
        ("C-f" . ivy-alt-done)
        ("C-l" . ivy-alt-done)
        ("C-j" . ivy-next-line)
        ("C-k" . ivy-previous-line)
        :map ivy-switch-buffer-map
        ("C-k" . ivy-previous-line)
        ("C-l" . ivy-done)
        ("C-d" . ivy-switch-buffer-kill)
        :map ivy-reverse-i-search-map
        ("C-k" . ivy-previous-line)
        ("C-d" . ivy-reverse-i-search-kill))
    :init
        (ivy-mode 1)
    :config
        (setq ivy-use-virtual-buffers t)
        (setq ivy-wrap t)
        (setq ivy-count-format "(%d/%d) ")
        (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
        (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
        (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
        (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

        ;; Set minibuffer height for different commands
        (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
        (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
        (setf (alist-get 'swiper ivy-height-alist) 15)
        (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

    (use-package counsel
        :demand t
        :bind (("M-x" . counsel-M-x)
                ("C-x b" . counsel-ibuffer)
                ("C-x C-f" . counsel-find-file)
                ;; ("C-M-j" . counsel-switch-buffer)
                ("C-M-l" . counsel-imenu)
        :map minibuffer-local-map
            ("C-r" . 'counsel-minibuffer-history))
        :custom
            (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
        :config
            (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  #+end_src
